compose.config.config.find: Using configuration files: ./docker-compose.yml
compose.cli.docker_client.get_client: docker-compose version 1.29.2, build unknown
docker-py version: <module 'docker.version' from '/usr/lib/python3/dist-packages/docker/version.py'>
CPython version: 3.12.7
OpenSSL version: OpenSSL 3.3.1 4 Jun 2024
compose.cli.docker_client.get_client: Docker base_url: http+docker://localhost
compose.cli.docker_client.get_client: Docker version: Platform={'Name': ''}, Components=[{'Name': 'Engine', 'Version': '26.1.3', 'Details': {'ApiVersion': '1.45', 'Arch': 'amd64', 'BuildTime': '2024-06-04T21:01:29.000000000+00:00', 'Experimental': 'false', 'GitCommit': '26.1.3-0ubuntu1', 'GoVersion': 'go1.22.3', 'KernelVersion': '6.11.0-8-generic', 'MinAPIVersion': '1.24', 'Os': 'linux'}}, {'Name': 'containerd', 'Version': '1.7.19', 'Details': {'GitCommit': ''}}, {'Name': 'runc', 'Version': '1.1.12-0ubuntu4', 'Details': {'GitCommit': ''}}, {'Name': 'docker-init', 'Version': '0.19.0', 'Details': {'GitCommit': ''}}], Version=26.1.3, ApiVersion=1.45, MinAPIVersion=1.24, GitCommit=26.1.3-0ubuntu1, GoVersion=go1.22.3, Os=linux, Arch=amd64, KernelVersion=6.11.0-8-generic, BuildTime=2024-06-04T21:01:29.000000000+00:00
compose.cli.verbose_proxy.proxy_callable: docker inspect_network <- ('marathon_default')
compose.cli.verbose_proxy.proxy_callable: docker inspect_network -> {'Attachable': True,
 'ConfigFrom': {'Network': ''},
 'ConfigOnly': False,
 'Containers': {'8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8': {'EndpointID': '0155f16373ef57eac03ca1fa8b4bee1ebadf9211867c45ef8ad80da0d90b86ed',
                                                                                     'IPv4Address': '192.168.144.2/20',
                                                                                     'IPv6Address': '',
                                                                                     'MacAddress': '02:42:c0:a8:90:02',
                                                                                     'Name': 'react_app'},
                'e568a842ece252ba886eb3cfb10360f36c9617dad19d058a81437fec1fadcaee': {'EndpointID': '377f2cb0b0b2d49b3a8005be613acdfb6317073a472ebbd834e5cec0d89181fa',
                                                                                     'IPv4Address': '192.168.144.3/20',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_postgres_data')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'postgres_data'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_postgres_data/_data',
 'Name': 'marathon_postgres_data',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_static_volume')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'static_volume'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_static_volume/_data',
 'Name': 'marathon_static_volume',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_media_volume')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'media_volume'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_media_volume/_data',
 'Name': 'marathon_media_volume',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker info <- ()
compose.cli.verbose_proxy.proxy_callable: docker info -> {'Architecture': 'x86_64',
 'BridgeNfIp6tables': True,
 'BridgeNfIptables': True,
 'CDISpecDirs': [],
 'CPUSet': True,
 'CPUShares': True,
 'CgroupDriver': 'systemd',
 'CgroupVersion': '2',
 'ContainerdCommit': {'Expected': '', 'ID': ''},
 'Containers': 2,
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_network <- ('marathon_default')
compose.cli.verbose_proxy.proxy_callable: docker inspect_network -> {'Attachable': True,
 'ConfigFrom': {'Network': ''},
 'ConfigOnly': False,
 'Containers': {'8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8': {'EndpointID': '0155f16373ef57eac03ca1fa8b4bee1ebadf9211867c45ef8ad80da0d90b86ed',
                                                                                     'IPv4Address': '192.168.144.2/20',
                                                                                     'IPv6Address': '',
                                                                                     'MacAddress': '02:42:c0:a8:90:02',
                                                                                     'Name': 'react_app'},
                'e568a842ece252ba886eb3cfb10360f36c9617dad19d058a81437fec1fadcaee': {'EndpointID': '377f2cb0b0b2d49b3a8005be613acdfb6317073a472ebbd834e5cec0d89181fa',
                                                                                     'IPv4Address': '192.168.144.3/20',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_postgres_data')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'postgres_data'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_postgres_data/_data',
 'Name': 'marathon_postgres_data',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_postgres_data')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'postgres_data'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_postgres_data/_data',
 'Name': 'marathon_postgres_data',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_static_volume')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'static_volume'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_static_volume/_data',
 'Name': 'marathon_static_volume',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_static_volume')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'static_volume'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_static_volume/_data',
 'Name': 'marathon_static_volume',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_media_volume')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'media_volume'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_media_volume/_data',
 'Name': 'marathon_media_volume',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume <- ('marathon_media_volume')
compose.cli.verbose_proxy.proxy_callable: docker inspect_volume -> {'CreatedAt': '2024-10-26T04:57:51Z',
 'Driver': 'local',
 'Labels': {'com.docker.compose.project': 'marathon',
            'com.docker.compose.version': '1.29.2',
            'com.docker.compose.volume': 'media_volume'},
 'Mountpoint': '/var/lib/docker/volumes/marathon_media_volume/_data',
 'Name': 'marathon_media_volume',
 'Options': None,
 'Scope': 'local'}
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=False, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 2 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 2 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('e568a842ece252ba886eb3cfb10360f36c9617dad19d058a81437fec1fadcaee')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['postgres'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['postgres'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['POSTGRES_DB=marathon',
                    'POSTGRES_USER=awc',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['npm', 'run', 'dev', '--', '--host', '0.0.0.0'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['npm', 'run', 'dev', '--', '--host', '0.0.0.0'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['HOST=0.0.0.0',
                    'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=frontend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 1 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['npm', 'run', 'dev', '--', '--host', '0.0.0.0'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['npm', 'run', 'dev', '--', '--host', '0.0.0.0'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['HOST=0.0.0.0',
                    'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=db', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 1 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('e568a842ece252ba886eb3cfb10360f36c9617dad19d058a81437fec1fadcaee')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['postgres'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['postgres'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['POSTGRES_DB=marathon',
                    'POSTGRES_USER=awc',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=backend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=backend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.service.build: Building frontend
#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile: 1.48kB 0.0s done
#1 DONE 0.1s

#2 [internal] load metadata for docker.io/library/node:18-alpine
#2 DONE 0.3s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.0s

#4 [1/8] FROM docker.io/library/node:18-alpine@sha256:02376a266c84acbf45bd19440e08e48b1c8b98037417334046029ab585de03e2
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 29.94MB 5.2s
#5 transferring context: 33.72MB 11.3s done
#5 DONE 11.5s

#6 [5/8] RUN echo "Installing dependencies with npm..."     && npm install --legacy-peer-deps --verbose     && echo "Dependencies installed successfully."
#6 CACHED

#7 [6/8] RUN echo "Installing Vite globally..."     && npm install vite --force --verbose     && echo "Vite installed successfully."
#7 CACHED

#8 [2/8] WORKDIR /app
#8 CACHED

#9 [3/8] COPY package*.json ./
#9 CACHED

#10 [4/8] RUN echo "Environment set to: development"
#10 CACHED

#11 [7/8] RUN echo "Installing Vite React plugin..."     && npm install @vitejs/plugin-react --force --verbose     && echo "Vite React plugin installed successfully."
#11 CACHED

#12 [8/8] COPY . .
#12 DONE 57.4s

#13 exporting to image
#13 exporting layers
#13 exporting layers 24.0s done
#13 writing image sha256:e1c0095a9eedcf04f8c939a778cfa7fca40826aecc75ac0139483bdda7e425a5 done
#13 naming to docker.io/library/marathon_frontend 0.0s done
#13 DONE 24.0s
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('postgres:13')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['postgres'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
...
compose.service.build: Building backend
#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile: 1.20kB done
#1 DONE 0.0s

#2 [internal] load metadata for docker.io/library/python:3.10-slim
#2 DONE 0.2s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.0s

#4 [1/8] FROM docker.io/library/python:3.10-slim@sha256:eb9ca77b1a0ffbde84c1dc333beb3490a2638813cc25a339f8575668855b9ff1
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 2.02MB 4.3s done
#5 DONE 4.3s

#6 [2/8] WORKDIR /app
#6 CACHED

#7 [3/8] RUN echo "Updating package lists..." && apt-get update -qq     && echo "Installing required packages..."     && apt-get install -y --no-install-recommends     libpq-dev     build-essential     netcat-openbsd     && rm -rf /var/lib/apt/lists/*     && echo "System dependencies installed successfully."
#7 CACHED

#8 [4/8] COPY requirements.txt /app/requirements.txt
#8 CACHED

#9 [5/8] RUN echo "Installing Python dependencies..."     && pip install --no-cache-dir -r /app/requirements.txt     && echo "Python dependencies installed successfully."
#9 CACHED

#10 [6/8] COPY . /app
#10 CACHED

#11 [7/8] RUN echo "Application code copied to /app."
#11 CACHED

#12 [8/8] RUN chmod +x /app/backend/entrypoint.sh
#12 CACHED

#13 exporting to image
#13 exporting layers done
#13 writing image sha256:3da1111d72572ecb2dfbe4a4bbbf330d09180b9e410326d13a4e92e679ac0b28 done
#13 naming to docker.io/library/marathon_backend done
#13 DONE 0.0s
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('nginx:latest')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['nginx', '-g', 'daemon off;'],
            'Domainname': '',
            'Entrypoint': ['/docker-entrypoint.sh'],
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=frontend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 1 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('marathon_frontend')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['/bin/sh',
                    '-c',
                    'echo "Starting Vite development server..."     && npm run '
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['npm', 'run', 'dev', '--', '--host', '0.0.0.0'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['npm', 'run', 'dev', '--', '--host', '0.0.0.0'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['HOST=0.0.0.0',
                    'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service._containers_have_diverged: react_app has diverged: 6848b5b1efbd3231f09317a0c26012bbccf440a473b465db156956ea1b4853ca != 1137dc28616349e3a8efa2aedd4b61d6b4ebd5797c3024140ef620d8b3738e33
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=db', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 1 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('postgres:13')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['postgres'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('e568a842ece252ba886eb3cfb10360f36c9617dad19d058a81437fec1fadcaee')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['postgres'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['postgres'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['POSTGRES_DB=marathon',
                    'POSTGRES_USER=awc',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=backend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=backend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.project._get_convergence_plans: nginx has upstream changes (backend)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'status': ['created', 'exited'], 'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'status': ['created', 'exited'], 'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=False, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=False, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=nginx', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.parallel.feed_queue: Pending: {<Service: frontend>, <Service: db>, <Service: backend>, <Service: nginx>}
compose.parallel.feed_queue: Starting producer thread for <Service: frontend>
compose.parallel.feed_queue: Starting producer thread for <Service: db>
Recreating react_app ... 
compose.parallel.feed_queue: Pending: {<Container: react_app (8aa30b)>}
compose.parallel.feed_queue: Starting producer thread for <Container: react_app (8aa30b)>
compose.service.execute_convergence_plan: postgres_db is up-to-date
compose.parallel.parallel_execute_iter: Finished processing: <Service: db>
compose.parallel.feed_queue: Pending: {<Service: backend>, <Service: nginx>}
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=False, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=db', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker stop <- ('8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8', timeout=10)
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 1 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('e568a842ece252ba886eb3cfb10360f36c9617dad19d058a81437fec1fadcaee')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': 'docker-default',
 'Args': ['postgres'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['postgres'],
            'Domainname': '',
            'Entrypoint': ['docker-entrypoint.sh'],
            'Env': ['POSTGRES_DB=marathon',
                    'POSTGRES_USER=awc',
...
compose.parallel.feed_queue: Starting producer thread for <Service: backend>
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=backend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={'label': ['com.docker.compose.project=marathon', 'com.docker.compose.service=backend', 'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
Creating django_app  ... 
compose.parallel.feed_queue: Pending: {ServiceName(project='marathon', service='backend', number=1)}
compose.parallel.feed_queue: Starting producer thread for ServiceName(project='marathon', service='backend', number=1)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('marathon_backend')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': None,
            'Domainname': '',
            'Entrypoint': ['/app/backend/entrypoint.sh'],
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('marathon_backend')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': None,
            'Domainname': '',
            'Entrypoint': ['/app/backend/entrypoint.sh'],
...
compose.service.build_container_labels: Added config hash: e1e49383bc7f55dd5f918f309e1ff91692b9fd1de041f4b29f966afef10f96d9
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (links=[], port_bindings={}, binds=['marathon_media_volume:/app/media:rw', 'marathon_static_volume:/app/staticfiles:rw', '/root/marathon/backend:/app:rw'], volumes_from=[], privileged=False, network_mode='marathon_default', devices=None, device_requests=None, dns=None, dns_opt=None, dns_search=None, restart_policy={'Name': 'always', 'MaximumRetryCount': 0}, runtime=None, cap_add=None, cap_drop=None, mem_limit=None, mem_reservation=None, memswap_limit=None, ulimits=None, log_config={'Type': '', 'Config': {}}, extra_hosts=None, read_only=None, pid_mode=None, security_opt=None, ipc_mode=None, cgroup_parent=None, cpu_quota=None, shm_size=None, sysctls=None, pids_limit=None, tmpfs=None, oom_kill_disable=None, oom_score_adj=None, mem_swappiness=None, group_add=None, userns_mode=None, init=None, init_path=None, isolation=None, cpu_count=None, cpu_percent=None, nano_cpus=None, volume_driver=None, cpuset_cpus=None, cpu_shares=None, storage_opt=None, blkio_weight=None, blkio_weight_device=None, device_read_bps=None, device_read_iops=None, device_write_bps=None, device_write_iops=None, mounts=None, device_cgroup_rules=None, cpu_period=None, cpu_rt_period=None, cpu_rt_runtime=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': ['marathon_media_volume:/app/media:rw',
           'marathon_static_volume:/app/staticfiles:rw',
           '/root/marathon/backend:/app:rw'],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': ''},
 'NetworkMode': 'marathon_default',
 'PortBindings': {},
 'RestartPolicy': {'MaximumRetryCount': 0, 'Name': 'always'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (command=['/app/backend/entrypoint.sh'], environment=['ENVIRONMENT=production', 'DJANGO_SECRET_KEY=c+4_8l3$w32zv$f=41i*^3t#7u06)mp3e1v(vk-n$zalb2k7o8', 'DJANGO_DB_NAME=marathon', 'DJANGO_DB_USER=awc', 'DJANGO_DB_PASSWORD=Starbury03', 'DJANGO_DB_HOST=db'], volumes={'/app/media': {}, '/app/staticfiles': {}, '/app': {}}, name='django_app', detach=True, ports=['8000'], labels={'com.docker.compose.project': 'marathon', 'com.docker.compose.service': 'backend', 'com.docker.compose.oneoff': 'False', 'com.docker.compose.project.working_dir': '/root/marathon', 'com.docker.compose.project.config_files': 'docker-compose.yml', 'com.docker.compose.container-number': '1', 'com.docker.compose.version': '1.29.2', 'com.docker.compose.config-hash': 'e1e49383bc7f55dd5f918f309e1ff91692b9fd1de041f4b29f966afef10f96d9'}, image='marathon_backend', host_config={'NetworkMode': 'marathon_default', 'RestartPolicy': {'Name': 'always', 'MaximumRetryCount': 0}, 'VolumesFrom': [], 'Binds': ['marathon_media_volume:/app/media:rw', 'marathon_static_volume:/app/staticfiles:rw', '/root/marathon/backend:/app:rw'], 'PortBindings': {}, 'Links': [], 'LogConfig': {'Type': '', 'Config': {}}}, networking_config={'EndpointsConfig': {'marathon_default': {'Aliases': ['backend'], 'IPAMConfig': {}}}})
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.cli.verbose_proxy.proxy_callable: docker stop -> None
compose.cli.verbose_proxy.proxy_callable: docker rename <- ('8aa30b90035d921fca072345ddb0cdca9a4a349a580347e9f94a63c558bb63b8', '8aa30b90035d_react_app')
compose.parallel.feed_queue: Pending: set()
compose.cli.verbose_proxy.proxy_callable: docker rename -> None
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('marathon_frontend')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['/bin/sh',
                    '-c',
                    'echo "Starting Vite development server..."     && npm run '
...
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('sha256:243312fad906858b76f90f20c872dab1a7bf3aeb0941695926ca4ca64aa6c51a')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {'Architecture': 'amd64',
 'Author': '',
 'Comment': 'buildkit.dockerfile.v0',
 'Config': {'ArgsEscaped': True,
            'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['/bin/sh',
                    '-c',
                    'echo "Starting Vite development server..."     && npm run '
...
compose.parallel.parallel_execute_iter: Failed: <Container: react_app (8aa30b)>
compose.parallel.feed_queue: Pending: set()

ERROR: for react_app  'ContainerConfig'
compose.parallel.feed_queue: Pending: set()
compose.parallel.parallel_execute_iter: Failed: <Service: frontend>
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {'Id': '489edf9dc3bc5a13476a3088282e9b6ad109e141d8c529ba751872b06b51e063',
 'Warnings': []}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- ('489edf9dc3bc5a13476a3088282e9b6ad109e141d8c529ba751872b06b51e063')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {'AppArmorProfile': '',
 'Args': ['/app/backend/entrypoint.sh'],
 'Config': {'AttachStderr': False,
            'AttachStdin': False,
            'AttachStdout': False,
            'Cmd': ['/app/backend/entrypoint.sh'],
            'Domainname': '',
            'Entrypoint': ['/app/backend/entrypoint.sh'],
            'Env': ['ENVIRONMENT=production',
                    'DJANGO_SECRET_KEY=c+4_8l3$w32zv$f=41i*^3t#7u06)mp3e1v(vk-n$zalb2k7o8',
...
compose.cli.verbose_proxy.proxy_callable: docker attach <- ('489edf9dc3bc5a13476a3088282e9b6ad109e141d8c529ba751872b06b51e063', stdout=True, stderr=True, stream=True)
compose.cli.verbose_proxy.proxy_callable: docker attach -> <docker.types.daemon.CancellableStream object at 0x75868aeded80>
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- ('489edf9dc3bc5a13476a3088282e9b6ad109e141d8c529ba751872b06b51e063', 'marathon_default')
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- ('489edf9dc3bc5a13476a3088282e9b6ad109e141d8c529ba751872b06b51e063', 'marathon_default', aliases=['backend', '489edf9dc3bc'], ipv4_address=None, ipv6_address=None, links=[], link_local_ips=None)
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- ('489edf9dc3bc5a13476a3088282e9b6ad109e141d8c529ba751872b06b51e063')
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: Pending: set()
compose.parallel.parallel_execute_iter: Failed: ServiceName(project='marathon', service='backend', number=1)
Creating django_app  ... error
compose.parallel.feed_queue: Pending: set()

ERROR: for django_app  Cannot start service backend: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "/app/backend/entrypoint.sh": permission denied: unknown
compose.parallel.parallel_execute_iter: Failed: <Service: backend>
compose.parallel.feed_queue: Pending: {<Service: nginx>}
compose.parallel.feed_queue: <Service: nginx> has upstream errors - not processing
compose.parallel.parallel_execute_iter: Failed: <Service: nginx>
compose.parallel.feed_queue: Pending: set()

ERROR: for frontend  'ContainerConfig'

ERROR: for backend  Cannot start service backend: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "/app/backend/entrypoint.sh": permission denied: unknown
Traceback (most recent call last):
  File "/usr/bin/docker-compose", line 33, in <module>
    sys.exit(load_entry_point('docker-compose==1.29.2', 'console_scripts', 'docker-compose')())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/cli/main.py", line 81, in main
    command_func()
  File "/usr/lib/python3/dist-packages/compose/cli/main.py", line 203, in perform_command
    handler(command, command_options)
  File "/usr/lib/python3/dist-packages/compose/metrics/decorator.py", line 18, in wrapper
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/cli/main.py", line 1184, in up
    to_attach = up(False)
                ^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/cli/main.py", line 1164, in up
    return self.project.up(
           ^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/project.py", line 697, in up
    results, errors = parallel.parallel_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/parallel.py", line 108, in parallel_execute
    raise error_to_reraise
  File "/usr/lib/python3/dist-packages/compose/parallel.py", line 206, in producer
    result = func(obj)
             ^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/project.py", line 679, in do
    return service.execute_convergence_plan(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 579, in execute_convergence_plan
    return self._execute_convergence_recreate(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 499, in _execute_convergence_recreate
    containers, errors = parallel_execute(
                         ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/parallel.py", line 108, in parallel_execute
    raise error_to_reraise
  File "/usr/lib/python3/dist-packages/compose/parallel.py", line 206, in producer
    result = func(obj)
             ^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 494, in recreate
    return self.recreate_container(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 612, in recreate_container
    new_container = self.create_container(
                    ^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 330, in create_container
    container_options = self._get_container_create_options(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 921, in _get_container_create_options
    container_options, override_options = self._build_container_volume_options(
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 960, in _build_container_volume_options
    binds, affinity = merge_volume_bindings(
                      ^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 1548, in merge_volume_bindings
    old_volumes, old_mounts = get_container_data_volumes(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/compose/service.py", line 1579, in get_container_data_volumes
    container.image_config['ContainerConfig'].get('Volumes') or {}
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
KeyError: 'ContainerConfig'
