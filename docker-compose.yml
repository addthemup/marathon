# docker-compose.yml - Updated to use a unified settings.py

version: '3.8'

services:
  backend:
    build:
      context: ./backend
    container_name: django_app
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./backend/.env
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--log-level", "info", "backend.wsgi:application"]
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod  # Specify production Dockerfile for production builds
    container_name: react_app
    ports:
      - "80:80"
    restart: always

  frontend_dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Specify development Dockerfile for development builds
    container_name: react_app_dev
    ports:
      - "5173:5173"
    environment:
      - HOST=0.0.0.0
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:13
    container_name: postgres_db
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_DB: marathon
      POSTGRES_USER: awc
      POSTGRES_PASSWORD: Starbury03 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  static_volume:
  media_volume:
